/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.19).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Order;
import io.swagger.model.SuccesfulOrder;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2021-05-12T12:36:09.273Z")

@Validated
@Api(value = "order", description = "the order API")
@RequestMapping(value = "/damianpostaru/PizzaOrder/1.0.0")
public interface OrderApi {

    @ApiOperation(value = "", nickname = "orderCancelOrderIdPut", notes = "Cancels an order with a given order ID.", response = Object.class, tags={ "order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Object.class),
        @ApiResponse(code = 404, message = "Order not found."),
        @ApiResponse(code = 412, message = "Unable to cancel your order after 5 minutes have elapsed."),
        @ApiResponse(code = 422, message = "Unable to cancel an already canceled or delivered order.") })
    @RequestMapping(value = "/order/cancel/{order_id}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Object> orderCancelOrderIdPut(@ApiParam(value = "",required=true) @PathVariable("order_id") Integer orderId);


    @ApiOperation(value = "", nickname = "orderCustomerIdGet", notes = "Get the orders (order history) of a customer by the customer ID.", response = Order.class, responseContainer = "List", tags={ "order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Order.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid ID supplied (E.g string instead of number, or no id provided at all)."),
        @ApiResponse(code = 404, message = "Customer_ID not found") })
    @RequestMapping(value = "/order/{customer_id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Order>> orderCustomerIdGet(@ApiParam(value = "",required=true) @PathVariable("customer_id") Integer customerId);


    @ApiOperation(value = "", nickname = "orderDeliverytimeOrderIdGet", notes = "Gets the estimated delivery time of an order with a given order ID.", response = Object.class, tags={ "order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Succes", response = Object.class),
        @ApiResponse(code = 404, message = "Order not found.") })
    @RequestMapping(value = "/order/deliverytime/{order_id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Object> orderDeliverytimeOrderIdGet(@ApiParam(value = "",required=true) @PathVariable("order_id") Integer orderId);


    @ApiOperation(value = "", nickname = "orderPost", notes = "Submits a new order to the restaurant; the format of the order is given below.", response = SuccesfulOrder.class, tags={ "order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Succes", response = SuccesfulOrder.class),
        @ApiResponse(code = 400, message = "The format of the object is not valid.") })
    @RequestMapping(value = "/order",
        method = RequestMethod.POST)
    ResponseEntity<SuccesfulOrder> orderPost(@ApiParam(value = ""  )  @Valid @RequestBody Order order);

}
